module finitemultiplier(Reso,A,B);
 output [3:0] Reso;
 input [3:0] A,B;

// Produce the product first 
wire [6:0] productu;
polynomialmulti M0(productu,A,B);

//Then reduce it with appropriate combinational logic
wire [3:0] w1,w2;

XOR_block M1(w1,productu[6:2]);
XOR_block M2(w2,{w1,productu[1]});
XOR_block M3(Reso,{w2,productu[0]});
//XOR_block M4(Reso,{w3,productu[0]});

endmodule

module XOR_block(A,B);
output [3:0] A;
input [4:0] B;

wire [4:0] temp;
assign temp = B[4]?5'b10011:5'b00000;

wire [4:0] temp2;
assign temp2 = temp^B;

assign A = temp2[3:0];

endmodule

module polynomialmulti(Resu,A,B);
	output [6:0] Resu;
	input [3:0] A,B;
	
wire [3:0] w1,w2,w3,w4;

assign w1 = {A[3]&B[3],A[3]&B[2],A[3]&B[1],A[3]&B[0]};
assign w2 = {A[2]&B[3],A[2]&B[2],A[2]&B[1],A[2]&B[0]};
assign w3 = {A[1]&B[3],A[1]&B[2],A[1]&B[1],A[1]&B[0]};
assign w4 = {A[0]&B[3],A[0]&B[2],A[0]&B[1],A[0]&B[0]};

assign Resu[6] = w1[3];
assign Resu[5] = w1[2]^w2[3];
assign Resu[4] = w1[1]^w2[2]^w3[3];
assign Resu[3] = w1[0]^w2[1]^w3[2]^w4[3];
assign Resu[2] =       w2[0]^w3[1]^w4[2];
assign Resu[1] =             w3[0]^w4[1];
assign Resu[0] =                   w4[0];

endmodule
